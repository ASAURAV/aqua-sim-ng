/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2015 UWSN Lab at the University of Connecticut
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Robert Martin <robert.martin@engr.uconn.edu>
 */


#include "ns3/nstime.h"
#include "ns3/log.h"

#include <stdio.h>
#include <vector>
#include <math.h>

#include "aqua-sim-propagation.h"

#define _USE_MATH_DEFINES

namespace ns3 {

NS_LOG_COMPONENT_DEFINE ("AquaSimPropagation");
NS_OBJECT_ENSURE_REGISTERED (AquaSimPropagation);

TypeId
AquaSimPropagation::GetTypeId ()
{
  static TypeId tid = TypeId ("ns3::AquaSimPropagation")
    .SetParent<Object>()
  ;
  return tid;
}

AquaSimPropagation::AquaSimPropagation ()
{
}

AquaSimPropagation::~AquaSimPropagation ()
{
}

/**
 * @param SL sound level in dB
 * @return receiving power in J
 */
double
AquaSimPropagation::Rayleigh (double SL)
{
  double mPr = std::pow(10, SL/20 - 6);  //signal strength (pressure in Pa)
  double segma = pow(mPr, 2) * 2 / M_PI;

  return -2 * segma * m_rand->GetValue();       // std::log(Random::uniform())
}

/**
 * Thorp equation, calculating attenuation according
 *
 * @param dist  distance that signal travels
 * @param freq  central frequency
 * @return attentuation in dB *
 */
double
AquaSimPropagation::Thorp (double dist, double freq)
{
  double k, spre, abso;

  if (dist <= 500) {
    k = 3;
  } else if (dist <= 2000) {
    k = 2;
  } else {
    k = 1.5;
  }

  spre = 10 * k * log10(dist);

  abso = dist/1000 * (0.11 * pow(freq,2) / (1 + pow(freq,2) )
                + 44 * pow(freq,2) / (4100 + pow(freq,2) )
                + 0.000275 * pow(freq,2) + 0.003 );
  
  return spre + abso;
}

double
AquaSimPropagation::distance (Ptr<MobilityModel> s, Ptr<MobilityModel> r)
{
  return s->GetDistanceFrom(r);  //Redundant: Done on channel as well...
}

}  // namespace n3
